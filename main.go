package main

import (
	"log"
	"os"
	"os/user"
	"path"
)

/*
KEY TERMS:

Command: This is the task the agent performs on the browser, or through an LLM.
Example commands: collect html from webpage, navigate to webpage, click on element, take a screenshot, multimodal chat request, standard chat request

Operation: A operation is a sequence of commands, all commands in an operation must be of the same category (LLM, Browser)

Session: A session represents the period of time when the agent is running. Any data collected will be saved to a unique session directory. By default, a session is
sequential meaning you have to predetermine all necessary commands before invoking the agent. Commands cannot be determined on the spot, as sessions end upon the last command.

Configuration: Consists of a session id, and an array of operations, this is what is ingested through the CLI.

Live Session: Unlike a regular session this session does not end upon entry of the last command and thus can ingest dynamic commands.
*/

/*
Settings

parameters for configuring agent sessions
*/
type Settings struct {
	Timeout     *int32                   `yaml:"timeout"`      // (both) How long a browser lifetime lasts, for llms how long to wait for a request to complete
	Headless    bool                     `yaml:"headless"`     // (browser only) if the browser session should be visible
	MaxToken    *int                     `yaml:"max_tokens"`   // (llm only) the max tokens the llm can return
	LLMSettings []map[string]interface{} `yaml:"llm_settings"` // (llm only) settings specific to llm family i.e. open ai
	TryLimit    int16                    `yaml:"try_limit"`    // (llm only) how many times to retry a request if rate limited
}

/*
createSessionDirectory

creates the session directory this directory stores all responses generated by the agent along with other supplementary
information.

by default all data is saved in the cache directory ~/.cache/benchai/agent/sessions, this default save location can be
changed using the environment variable BENCHAI_SAVEDIR
*/
func createSessionDirectory(sessionId string) string {
	pth, exists := os.LookupEnv("BENCHAI_SAVEDIR")

	if exists {
		if _, err := os.Stat(pth); err != nil && os.IsNotExist(err) {
			log.Fatalf("directory %s does not exist", pth)
		} else if err != nil {
			log.Fatalf("cannot use directory %s as the save location basepath", pth)
		}
		pth = path.Join(pth, "agent")
		if err := os.Mkdir(pth, 0777); err != nil && !os.IsExist(err) {
			log.Fatalf("cannot use directory %s as the save location basepath", pth)
		}
	} else {
		currentUser, err := user.Current()

		if err != nil {
			log.Fatal("was unable to extract the current os user")
		}

		pth = path.Join(currentUser.HomeDir, "/.cache/benchai/agent/")
	}

	pth = path.Join(pth, "sessions")

	if err := os.MkdirAll(pth, 0777); err != nil && !os.IsExist(err) {
		log.Fatalf("session directory at %s does not exist and cannot be created", pth)
	}

	pth = path.Join(pth, sessionId)

	if err := os.Mkdir(pth, 0777); err != nil && os.IsExist(err) {
		log.Fatalf("session: %s, already exists", pth)
	} else if err != nil {
		log.Fatalf("cannot use directory %s as the session save location", pth)
	}

	return pth
}
